{
  "info": {
    "_postman_id": "eed1ffe0-13b1-4b6c-b8b0-0eed4b75398b",
    "name": "My tests for comment",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "28008683"
  },
  "item": [
    {
      "name": "User 1 create",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([201]);",
              "});",
              "pm.test(\"Has user create response\", function () {",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "pm.test(\"Test user 'id' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
              "});",
              "pm.test(\"Test user 'email' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('email');",
              "    pm.expect(jsonData.email, '\"email\" must be \"user@user.com\"').to.eql('user@user.com');",
              "});",
              "pm.test(\"Test user 'name' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('name');",
              "    pm.expect(jsonData.name, '\"name\" must be \"user\"').to.eql('user');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "*/*",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"user\",\n    \"email\": \"user@user.com\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/admin/users",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "User 2 create",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([201]);",
              "});",
              "pm.test(\"Has user create response\", function () {",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "pm.test(\"Test user 'id' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
              "});",
              "pm.test(\"Test user 'email' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('email');",
              "    pm.expect(jsonData.email, '\"email\" must be \"user2@user2.com\"').to.eql('user2@user2.com');",
              "});",
              "pm.test(\"Test user 'name' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('name');",
              "    pm.expect(jsonData.name, '\"name\" must be \"user2\"').to.eql('user2');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "*/*",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"user2\",\n    \"email\": \"user2@user2.com\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/admin/users",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Category 1 create",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
              "});\r",
              "pm.test(\"Has category create response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test category 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Test category 'name' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('name');\r",
              "    pm.expect(jsonData.name, '\"name\" must be \"Test category\"').to.eql('Test category');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "*/*",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\"name\":\"Test category\"}"
        },
        "url": {
          "raw": "{{baseUrl}}/admin/categories",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "categories"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Event 1 create",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
              "});\r",
              "pm.test(\"Has event create response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test event 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Test event 'title' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('title');\r",
              "    pm.expect(jsonData.title, '\"title\" must be \"Тестовое мероприятие.\"').to.eql('Тестовое мероприятие.');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\"annotation\":\"Анотация для тестового мероприятия.\",\"category\":1,\"description\":\"Описание для тестового мероприятия.\",\"eventDate\":\"2023-07-20 02:49:36\",\"location\":{\"lat\":24.5822,\"lon\":49.8332},\"paid\":\"true\",\"participantLimit\":\"253\",\"requestModeration\":\"true\",\"title\":\"Тестовое мероприятие.\"}"
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/events",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "events"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Event 2 create",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
              "});\r",
              "pm.test(\"Has event create response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test event 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
              "});\r",
              "pm.test(\"Test event 'title' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('title');\r",
              "    pm.expect(jsonData.title, '\"title\" must be \"Второе тестовое мероприятие.\"').to.eql('Второе тестовое мероприятие.');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\"annotation\":\"Анотация для второго тестового мероприятия.\",\"category\":1,\"description\":\"Описание для второго тестового мероприятия.\",\"eventDate\":\"2023-07-20 02:49:36\",\"location\":{\"lat\":24.5822,\"lon\":49.8332},\"paid\":\"true\",\"participantLimit\":\"100\",\"requestModeration\":\"true\",\"title\":\"Второе тестовое мероприятие.\"}"
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/events",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "events"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Comment 1 create",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
              "});\r",
              "pm.test(\"Has comment create response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test comment 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Test comment 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('text');\r",
              "    pm.expect(jsonData.text, '\"text\" must be \"Комментарий для первого мероприятия\"').to.eql('Комментарий для первого мероприятия');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Комментарий для первого мероприятия\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/comments/user/:userId/events/:eventId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user",
            ":userId",
            "events",
            ":eventId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            },
            {
              "key": "eventId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Comment 2 create (User not found)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 404\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Комментарий для воторого мероприятия\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/comments/user/:userId/events/:eventId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user",
            ":userId",
            "events",
            ":eventId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "5"
            },
            {
              "key": "eventId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Comment 2 create (Event not found)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 404\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Комментарий для второго мероприятия\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/comments/user/:userId/events/:eventId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user",
            ":userId",
            "events",
            ":eventId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            },
            {
              "key": "eventId",
              "value": "5"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Comment 2 create (Comment without text)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 500\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([500]);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/comments/user/:userId/events/:eventId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user",
            ":userId",
            "events",
            ":eventId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            },
            {
              "key": "eventId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Comment 2 create (Comment with empty text)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \" \"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/comments/user/:userId/events/:eventId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user",
            ":userId",
            "events",
            ":eventId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            },
            {
              "key": "eventId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Comment 2 create",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
              "});\r",
              "pm.test(\"Has comment create response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test comment 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
              "});\r",
              "pm.test(\"Test comment 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('text');\r",
              "    pm.expect(jsonData.text, '\"text\" must be \"Комментарий для второго мероприятия\"').to.eql('Комментарий для второго мероприятия');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Комментарий для второго мероприятия\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/comments/user/:userId/events/:eventId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user",
            ":userId",
            "events",
            ":eventId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            },
            {
              "key": "eventId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Comment 3 create",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
              "});\r",
              "pm.test(\"Has comment create response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test comment 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
              "});\r",
              "pm.test(\"Test comment 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('text');\r",
              "    pm.expect(jsonData.text, '\"text\" must be \"Комментарий для третьего мероприятия\"').to.eql('Комментарий для третьего мероприятия');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Комментарий для третьего мероприятия\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/comments/user/:userId/events/:eventId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user",
            ":userId",
            "events",
            ":eventId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "2"
            },
            {
              "key": "eventId",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get Comment 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "});\r",
              "pm.test(\"Has comment create response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test comment 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Test comment 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('text');\r",
              "    pm.expect(jsonData.text, '\"text\" must be \"Комментарий для первого мероприятия\"').to.eql('Комментарий для первого мероприятия');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/comments/user/:userId/comment/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user",
            ":userId",
            "comment",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            },
            {
              "key": "commentId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get Comment 1 (User not found)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 404\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/comments/user/:userId/comment/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user",
            ":userId",
            "comment",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "5"
            },
            {
              "key": "commentId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get Comment 1 (Comment not found)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 404\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/comments/user/:userId/comment/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user",
            ":userId",
            "comment",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            },
            {
              "key": "commentId",
              "value": "5"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get all comments",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "});\r",
              "pm.test(\"Test list comments response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 3').to.eql(3);\r",
              "});\r",
              "\r",
              "pm.test(\"Test comment[0] 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('id');\r",
              "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Test comment[0] 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('text');\r",
              "    pm.expect(jsonData[0].text, '\"text\"  must be \"Комментарий для первого мероприятия\"').to.eql('Комментарий для первого мероприятия');\r",
              "});\r",
              "pm.test(\"Test comment[1] 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[1]).to.have.property('id');\r",
              "    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);\r",
              "});\r",
              "pm.test(\"Test comment[1] 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[1]).to.have.property('text');\r",
              "    pm.expect(jsonData[1].text, '\"text\"  must be \"Комментарий для второго мероприятия\"').to.eql('Комментарий для второго мероприятия');\r",
              "});\r",
              "pm.test(\"Test comment[2] 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[2]).to.have.property('id');\r",
              "    pm.expect(jsonData[2].id, '\"id\" must be 3').to.eql(3);\r",
              "});\r",
              "pm.test(\"Test comment[2] 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[2]).to.have.property('text');\r",
              "    pm.expect(jsonData[2].text, '\"text\"  must be \"Комментарий для третьего мероприятия\"').to.eql('Комментарий для третьего мероприятия');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/comments/user",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get all comments filter by comment id",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "});\r",
              "pm.test(\"Test list comments response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
              "});\r",
              "\r",
              "pm.test(\"Test comment[0] 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('id');\r",
              "    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
              "});\r",
              "pm.test(\"Test comment[0] 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('text');\r",
              "    pm.expect(jsonData[0].text, '\"text\"  must be \"Комментарий для второго мероприятия\"').to.eql('Комментарий для второго мероприятия');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/comments/user?comments=2",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user"
          ],
          "query": [
            {
              "key": "comments",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get all comments filter by comment and user (empty list)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "});\r",
              "pm.test(\"Test list comments response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/comments/user?comments=3&users=1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user"
          ],
          "query": [
            {
              "key": "comments",
              "value": "3"
            },
            {
              "key": "users",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get all comments filter by comment and user",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "});\r",
              "pm.test(\"Test list comments response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Test comment[0] 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('id');\r",
              "    pm.expect(jsonData[0].id, '\"id\" must be 3').to.eql(3);\r",
              "});\r",
              "pm.test(\"Test comment[0] 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('text');\r",
              "    pm.expect(jsonData[0].text, '\"text\"  must be \"Комментарий для третьего мероприятия\"').to.eql('Комментарий для третьего мероприятия');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/comments/user?comments=3&users=2",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user"
          ],
          "query": [
            {
              "key": "comments",
              "value": "3"
            },
            {
              "key": "users",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get all comments filter by comment and user and events",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "});\r",
              "pm.test(\"Test list comments response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Test comment[0] 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('id');\r",
              "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Test comment[0] 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('text');\r",
              "    pm.expect(jsonData[0].text, '\"text\"  must be \"Комментарий для первого мероприятия\"').to.eql('Комментарий для первого мероприятия');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/comments/user?comments=1&users=1&events=1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user"
          ],
          "query": [
            {
              "key": "comments",
              "value": "1"
            },
            {
              "key": "users",
              "value": "1"
            },
            {
              "key": "events",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get all comments filter by all params",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "});\r",
              "pm.test(\"Test list comments response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Test comment[0] 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('id');\r",
              "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Test comment[0] 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('text');\r",
              "    pm.expect(jsonData[0].text, '\"text\"  must be \"Комментарий для первого мероприятия\"').to.eql('Комментарий для первого мероприятия');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/comments/user?comments=1&users=1&events=1&text=первого",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user"
          ],
          "query": [
            {
              "key": "comments",
              "value": "1"
            },
            {
              "key": "users",
              "value": "1"
            },
            {
              "key": "events",
              "value": "1"
            },
            {
              "key": "text",
              "value": "первого"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get all comments filter by text and user and events",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "});\r",
              "pm.test(\"Test list comments response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Test comment[0] 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('id');\r",
              "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Test comment[0] 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('text');\r",
              "    pm.expect(jsonData[0].text, '\"text\"  must be \"Комментарий для первого мероприятия\"').to.eql('Комментарий для первого мероприятия');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/comments/user?text=первого&users=1&events=1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user"
          ],
          "query": [
            {
              "key": "text",
              "value": "первого"
            },
            {
              "key": "users",
              "value": "1"
            },
            {
              "key": "events",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get all comments filter by comment and user and events Copy",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "});\r",
              "pm.test(\"Test list comments response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Test comment[0] 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('id');\r",
              "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Test comment[0] 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('text');\r",
              "    pm.expect(jsonData[0].text, '\"text\"  must be \"Комментарий для первого мероприятия\"').to.eql('Комментарий для первого мероприятия');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/comments/user?comments=1&text=первого&events=1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user"
          ],
          "query": [
            {
              "key": "comments",
              "value": "1"
            },
            {
              "key": "text",
              "value": "первого"
            },
            {
              "key": "events",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get all comments filter by comment and user and text",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "});\r",
              "pm.test(\"Test list comments response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Test comment[0] 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('id');\r",
              "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Test comment[0] 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('text');\r",
              "    pm.expect(jsonData[0].text, '\"text\"  must be \"Комментарий для первого мероприятия\"').to.eql('Комментарий для первого мероприятия');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/comments/user?comments=1&users=1&text=первого",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user"
          ],
          "query": [
            {
              "key": "comments",
              "value": "1"
            },
            {
              "key": "users",
              "value": "1"
            },
            {
              "key": "text",
              "value": "первого"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get all comments filter by comment and event",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "});\r",
              "pm.test(\"Test list comments response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Test comment[0] 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('id');\r",
              "    pm.expect(jsonData[0].id, '\"id\" must be 3').to.eql(3);\r",
              "});\r",
              "pm.test(\"Test comment[0] 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('text');\r",
              "    pm.expect(jsonData[0].text, '\"text\"  must be \"Комментарий для третьего мероприятия\"').to.eql('Комментарий для третьего мероприятия');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/comments/user?comments=3&events=2",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user"
          ],
          "query": [
            {
              "key": "comments",
              "value": "3"
            },
            {
              "key": "events",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get all comments filter by comment and event(empty list)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "});\r",
              "pm.test(\"Test list comments response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/comments/user?comments=3&events=1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user"
          ],
          "query": [
            {
              "key": "comments",
              "value": "3"
            },
            {
              "key": "events",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get all comments filter by comment and text(empty list)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "});\r",
              "pm.test(\"Test list comments response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/comments/user?comments=3&text=несуществующий",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user"
          ],
          "query": [
            {
              "key": "comments",
              "value": "3"
            },
            {
              "key": "text",
              "value": "несуществующий"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get all comments filter by comment and text",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "});\r",
              "pm.test(\"Test list comments response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Test comment[0] 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('id');\r",
              "    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
              "});\r",
              "pm.test(\"Test comment[0] 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('text');\r",
              "    pm.expect(jsonData[0].text, '\"text\"  must be \"Комментарий для второго мероприятия\"').to.eql('Комментарий для второго мероприятия');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/comments/user?comments=2&text=второго",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user"
          ],
          "query": [
            {
              "key": "comments",
              "value": "2"
            },
            {
              "key": "text",
              "value": "второго"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get all comments filter by user id",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "});\r",
              "pm.test(\"Test list comments response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
              "});\r",
              "\r",
              "pm.test(\"Test comment[0] 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('id');\r",
              "    pm.expect(jsonData[0].id, '\"id\" must be 3').to.eql(3);\r",
              "});\r",
              "pm.test(\"Test comment[0] 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('text');\r",
              "    pm.expect(jsonData[0].text, '\"text\"  must be \"Комментарий для третьего мероприятия\"').to.eql('Комментарий для третьего мероприятия');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/comments/user?users=2",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user"
          ],
          "query": [
            {
              "key": "users",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get all comments filter by event id",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "});\r",
              "pm.test(\"Test list comments response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
              "});\r",
              "\r",
              "pm.test(\"Test comment[0] 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('id');\r",
              "    pm.expect(jsonData[0].id, '\"id\" must be 3').to.eql(3);\r",
              "});\r",
              "pm.test(\"Test comment[0] 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('text');\r",
              "    pm.expect(jsonData[0].text, '\"text\"  must be \"Комментарий для третьего мероприятия\"').to.eql('Комментарий для третьего мероприятия');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/comments/user?events=2",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user"
          ],
          "query": [
            {
              "key": "events",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get all comments filter by text",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "});\r",
              "pm.test(\"Test list comments response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
              "});\r",
              "\r",
              "pm.test(\"Test comment[0] 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('id');\r",
              "    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
              "});\r",
              "pm.test(\"Test comment[0] 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('text');\r",
              "    pm.expect(jsonData[0].text, '\"text\"  must be \"Комментарий для второго мероприятия\"').to.eql('Комментарий для второго мероприятия');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/comments/user?text=второго",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user"
          ],
          "query": [
            {
              "key": "text",
              "value": "второго"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get all comments filter by user and event",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "});\r",
              "pm.test(\"Test list comments response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
              "});\r",
              "\r",
              "pm.test(\"Test comment[0] 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('id');\r",
              "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Test comment[0] 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('text');\r",
              "    pm.expect(jsonData[0].text, '\"text\"  must be \"Комментарий для первого мероприятия\"').to.eql('Комментарий для первого мероприятия');\r",
              "});\r",
              "pm.test(\"Test comment[1] 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[1]).to.have.property('id');\r",
              "    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);\r",
              "});\r",
              "pm.test(\"Test comment[1] 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[1]).to.have.property('text');\r",
              "    pm.expect(jsonData[1].text, '\"text\"  must be \"Комментарий для второго мероприятия\"').to.eql('Комментарий для второго мероприятия');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/comments/user?users=1&events=1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user"
          ],
          "query": [
            {
              "key": "users",
              "value": "1"
            },
            {
              "key": "events",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get all comments filter by event and text",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "});\r",
              "pm.test(\"Test list comments response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
              "});\r",
              "\r",
              "pm.test(\"Test comment[0] 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('id');\r",
              "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Test comment[0] 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('text');\r",
              "    pm.expect(jsonData[0].text, '\"text\"  must be \"Комментарий для первого мероприятия\"').to.eql('Комментарий для первого мероприятия');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/comments/user?text=первого&events=1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user"
          ],
          "query": [
            {
              "key": "text",
              "value": "первого"
            },
            {
              "key": "events",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get all comments filter by event and text (empty list)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "});\r",
              "pm.test(\"Test list comments response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/comments/user?text=третьего&events=1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user"
          ],
          "query": [
            {
              "key": "text",
              "value": "третьего"
            },
            {
              "key": "events",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get all comments filter by user and text",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "});\r",
              "pm.test(\"Test list comments response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
              "});\r",
              "\r",
              "pm.test(\"Test comment[0] 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('id');\r",
              "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Test comment[0] 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('text');\r",
              "    pm.expect(jsonData[0].text, '\"text\"  must be \"Комментарий для первого мероприятия\"').to.eql('Комментарий для первого мероприятия');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/comments/user?users=1&text=первого",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user"
          ],
          "query": [
            {
              "key": "users",
              "value": "1"
            },
            {
              "key": "text",
              "value": "первого"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get all comments filter by user and text (empty list)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "});\r",
              "pm.test(\"Test list comments response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/comments/user?users=1&text=третьего",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user"
          ],
          "query": [
            {
              "key": "users",
              "value": "1"
            },
            {
              "key": "text",
              "value": "третьего"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get all comments filter by user and event (empty list)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "});\r",
              "pm.test(\"Test list comments response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/comments/user?users=1&events=2",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user"
          ],
          "query": [
            {
              "key": "users",
              "value": "1"
            },
            {
              "key": "events",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get all comments with page size 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "});\r",
              "pm.test(\"Test list comments response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
              "});\r",
              "\r",
              "pm.test(\"Test comment[0] 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('id');\r",
              "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Test comment[0] 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('text');\r",
              "    pm.expect(jsonData[0].text, '\"text\"  must be \"Комментарий для первого мероприятия\"').to.eql('Комментарий для первого мероприятия');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/comments/user?size=1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user"
          ],
          "query": [
            {
              "key": "size",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Update comment 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "});\r",
              "pm.test(\"Has comment create response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test comment 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Test comment 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('text');\r",
              "    pm.expect(jsonData.text, '\"text\" must be \"Обновленный комментарий для первого мероприятия\"').to.eql('Обновленный комментарий для первого мероприятия');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Обновленный комментарий для первого мероприятия\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/comments/user/:userId/comment/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user",
            ":userId",
            "comment",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            },
            {
              "key": "commentId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Update comment 1 (user not found)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 404\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Обновленный комментарий для первого мероприятия\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/comments/user/:userId/comment/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user",
            ":userId",
            "comment",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "3"
            },
            {
              "key": "commentId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Update comment 1 (comment not found)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 404\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Обновленный комментарий для первого мероприятия\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/comments/user/:userId/comment/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user",
            ":userId",
            "comment",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            },
            {
              "key": "commentId",
              "value": "5"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Update comment 1 (comment from another user)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 409\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Обновленный комментарий для первого мероприятия\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/comments/user/:userId/comment/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user",
            ":userId",
            "comment",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "2"
            },
            {
              "key": "commentId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Update comment 1 (empty text)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \" \"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/comments/user/:userId/comment/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user",
            ":userId",
            "comment",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            },
            {
              "key": "commentId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Delete comment 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/comments/user/:userId/comment/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user",
            ":userId",
            "comment",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            },
            {
              "key": "commentId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get all comments (without comment 1)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "});\r",
              "pm.test(\"Test list comments response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
              "});\r",
              "pm.test(\"Test comment[0] 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('id');\r",
              "    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
              "});\r",
              "pm.test(\"Test comment[0] 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('text');\r",
              "    pm.expect(jsonData[0].text, '\"text\"  must be \"Комментарий для второго мероприятия\"').to.eql('Комментарий для второго мероприятия');\r",
              "});\r",
              "pm.test(\"Test comment[1] 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[1]).to.have.property('id');\r",
              "    pm.expect(jsonData[1].id, '\"id\" must be 3').to.eql(3);\r",
              "});\r",
              "pm.test(\"Test comment[1] 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[1]).to.have.property('text');\r",
              "    pm.expect(jsonData[1].text, '\"text\"  must be \"Комментарий для третьего мероприятия\"').to.eql('Комментарий для третьего мероприятия');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/comments/user",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Delete comment 1 (user not found)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 404\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/comments/user/:userId/comment/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user",
            ":userId",
            "comment",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "3"
            },
            {
              "key": "commentId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Delete comment 1 (comment not found)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 404\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/comments/user/:userId/comment/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user",
            ":userId",
            "comment",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            },
            {
              "key": "commentId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Delete comment 3 (from another user)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 409\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/comments/user/:userId/comment/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "user",
            ":userId",
            "comment",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            },
            {
              "key": "commentId",
              "value": "3"
            }
          ]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    }
  ]
}